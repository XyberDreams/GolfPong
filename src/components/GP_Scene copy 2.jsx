/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/golfpong/gp_scene.glb 
*/

import React, { useEffect, useRef, useState } from "react";
import { KTX2Loader } from "three/examples/jsm/Addons.js";
import * as THREE from "three";
import { useGLTF, useAnimations, Line } from "@react-three/drei";
import { useThree, useFrame } from "@react-three/fiber";
import { useExperience } from "../hooks/useExperience";
import useAnimationHelper from "../hooks/useAnimationHelper";
import { useControls, button } from "leva";
import { DissolveMaterial } from "../utils/DissolveMaterial";
import { CustomTrail } from "./CustomTrail";

export default function GP_Scene(props) {
  const group = React.useRef();
  const ballRef = useRef();
  const isBallMoving = useRef(false);
  const trailRef = useRef([]);
  const [, setRerender] = useState(0);
  const stillFrames = useRef(0);
  const [dissolveVisible, setDissolveVisible] = useState(false);

  const prevPosRef = useRef(new THREE.Vector3());
  const lastLoggedTrailPoint = useRef(null);
  const lastPoint = trailRef.current[trailRef.current.length - 1];
  const trailKey = lastPoint
    ? `${lastPoint.x},${lastPoint.y},${lastPoint.z}`
    : "empty";

  const [trail, setTrail] = useState([]);
  const gl = useThree((state) => state.gl);
  // KTX2Loader logic for KTX2-compressed textures
  const { nodes, materials, animations } = useGLTF(
    "/golfpong/gp_scene.glb",
    undefined,
    undefined,
    (loader) => {
      const ktx2loader = new KTX2Loader();
      ktx2loader.setTranscoderPath(
        "https://cdn.jsdelivr.net/gh/pmndrs/drei-assets/basis/"
      );
      ktx2loader.detectSupport(gl);
      loader.setKTX2Loader(ktx2loader);
    }
  );
  const { actions } = useAnimations(animations, group);
  const animationNames = Object.keys(actions);
  const animationHelper = useAnimationHelper(actions, animationNames, group);

  const { golfSwingState } = useExperience();

  useEffect(() => {
    if (!actions || !animationHelper) return;
    if (golfSwingState === "startSwing") {
      animationHelper.playAllClipsAndPause(40, 5, ["golf_club.002Action"]);
      console.log("startSwing");
    }
    if (golfSwingState === "successSwing") {
      animationHelper.continueToNextPause(100, 5, ["golf_club.002Action"]);
      animationHelper.playAllClipsAndPause(100, 5, ["Cube.009Action"]);
      console.log("successSwing");
    }
    if (golfSwingState === "missedSwing") {
      animationHelper.continueToNextPause(100, 5, ["golf_club.002Action"]);
      animationHelper.playAllClipsAndPause(100, 5, ["Cube.009Action"]);
      console.log("missedSwing");
    }
    if (golfSwingState === "noSwing") {
      animationHelper.continueToNextPause(100, 5, ["golf_club.002Action"]);
      console.log("noSwing");
    }
  }, [golfSwingState, actions]);

  useEffect(() => {
    console.log("isBallMoving is : ", isBallMoving.current);
  }, []);

  useFrame(() => {
    if (ballRef.current) {
      const pos = new THREE.Vector3();
      ballRef.current.getWorldPosition(pos);

      if (pos.distanceTo(prevPosRef.current) > 0.05) {
        isBallMoving.current = true;
        stillFrames.current = 0;
        console.log("Added point, trail length:", trailRef.current.length);

        if (trailRef.current.length >= 30) trailRef.current.shift();
        trailRef.current.push(pos.clone());
        prevPosRef.current.copy(pos);
      } else {
        stillFrames.current += 1;
        // Only set to false if the ball has been still for 10 frames
        if (stillFrames.current > 10) {
          isBallMoving.current = false;
        }
      }
      setRerender((r) => r + 1);
    }

    const lastPoint = trailRef.current[trailRef.current.length - 1];
    if (
      lastPoint &&
      (!lastLoggedTrailPoint.current ||
        !lastPoint.equals(lastLoggedTrailPoint.current))
    ) {
      console.log(
        "Trail updated:",
        trailRef.current.map((v) => v.toArray())
      );
      lastLoggedTrailPoint.current = lastPoint.clone();
    }
  });

  useControls("GOLF Controls", {
    Play_Animation: button(() => {
      if (!actions || Object.keys(actions).length === 0) return;
      Object.values(actions).forEach((action) => {
        if (action) {
          action.reset();
          action.setLoop(THREE.LoopOnce, 1);
          action.clampWhenFinished = true;
          action.paused = false;
          action.play();
        }
      });
    }),
    Dissolve: button(() => setDissolveVisible((prev) => !prev)),
  });

  useEffect(() => {
    const interval = setInterval(() => {
      if (!isBallMoving.current && trailRef.current.length > 0) {
        trailRef.current.shift();
        setRerender((r) => r + 1);
        console.log(
          "Trail updated (fade):",
          trailRef.current.map((v) => v.toArray())
        );
      }
    }, 100);
    return () => clearInterval(interval);
  }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <group>
        <CustomTrail
          width={0.2}
          color="hotpink"
          length={5}
          decay={1.5}
          local={false}
          stride={0.01}
          interval={5}
        >
          <group
            ref={ballRef}
            name="ball"
            position={[0, -2.273, 0]}
            rotation={[0, -1.556, 0]}
            scale={0.038}
          >
            <mesh
              name="ball_primitive0"
              geometry={nodes.ball_primitive0.geometry}
              material={materials.Material}
            />
            <mesh
              name="ball_primitive1"
              geometry={nodes.ball_primitive1.geometry}
              material={materials["Material.001"]}
            />
          </group>
        </CustomTrail>

        <mesh
          name="targetmat"
          geometry={nodes.targetmat.geometry}
          material={materials["Material.006"]}
          position={[0, -2.025, -5.437]}
          rotation={[-2.655, 0, -Math.PI]}
          scale={[-0.654, -0.014, -0.654]}
        />
        <mesh
          name="platform"
          geometry={nodes.platform.geometry}
          material={materials["__GLTFLoader._default"]}
          position={[0, -2.344, -2.775]}
          scale={[1.517, 3.437, 3.437]}
        />
        {/* <mesh
          name="puttingg_green_primitive0"
          geometry={nodes.puttingg_green_primitive0.geometry}
          material={materials["Material.003"]}
          position={[0, -2.344, 0]}
          scale={[0.185, 0.185, 0.186]}
        >
          {dissolveVisible && (
            <DissolveMaterial
              baseMaterial={materials["Material.003"]}
              visible={dissolveVisible}
      
            />
          )}
        </mesh> */}

        {!dissolveVisible ? (
          <mesh
            name="puttingg_green_primitive0"
            geometry={nodes.puttingg_green_primitive0.geometry}
            material={materials["Material.003"]}
            position={[0, -2.344, 0]}
            scale={[0.185, 0.185, 0.186]}
          />
        ) : (
          <mesh
            name="puttingg_green_primitive0"
            geometry={nodes.puttingg_green_primitive0.geometry}
            position={[0, -2.344, 0]}
            scale={[0.185, 0.185, 0.186]}
          >
            <DissolveMaterial
              baseMaterial={materials["Material.003"]}
              visible={dissolveVisible}
            />
          </mesh>
        )}

        {/* <DissolveMaterial
          name="puttingg_green_primitive0"
          geometry={nodes.puttingg_green_primitive0.geometry}
          baseMaterial={materials["Material.003"]}
          position={[0, -2.344, 0]}
          scale={[0.185, 0.185, 0.186]}
        /> */}
        <mesh
          name="puttingg_green_primitive1"
          geometry={nodes.puttingg_green_primitive1.geometry}
          material={materials["a.grass"]}
          position={[0, -2.344, 0]}
          scale={[0.185, 0.185, 0.186]}
        />
        <mesh
          name="ring4_primitive1"
          geometry={nodes.ring4_primitive1.geometry}
          material={materials["Material.005"]}
          position={[-0.393, -1.814, -5.801]}
          rotation={[0.485, 0, 0]}
          scale={[0.192, 0.159, 0.192]}
        />
      </group>

      {/* {trailRef.current.length > 1 && (
        <line key={trailKey}>
          <bufferGeometry>
            <bufferAttribute
              attach="attributes-position"
              count={trailRef.current.length}
              array={
                new Float32Array(
                  trailRef.current.flatMap((v) => [v.x, v.y, v.z])
                )
              }
              itemSize={3}
            />
          </bufferGeometry>
          <lineBasicMaterial color="red" linewidth={20} />
        </line>
      )} */}
    </group>
  );
}

// useGLTF.preload("/golfpong/gp_scene.glb");
